/**
 * @file status.h
 * @author Pierre Biermann (https://github.com/ByteBender747)
 * @brief Status and error codes
 * @version 0.3
 * @date 2024-08-29
 *
 * @copyright Copyright (c) 2024
 *
 */

#ifndef STATUS_H_INCLUDED
#define STATUS_H_INCLUDED

#ifndef ERROR_BASE
#define ERROR_BASE 100000
#endif

#define OK  0
#define ERR ((E_ERROR_INVALID * ERROR_BASE) - __LINE__)

#define FAILED(x) ((x) < 0)
#define SUCCESSFUL(x) ((x) >= 0)
#define BASE_ERROR(x) ((x) / ERROR_BASE)

/**
 * @brief Error codes
 *
 */
enum error_code {
    E_ERROR_INVALID = -1,
    E_ERROR_OUT_OF_RESOURCE = -2,
    E_ERROR_OUT_OF_RANGE = -3,
    E_ERROR_OUT_OF_MEMORY = -4,
    E_ERROR_INVALID_OPERATION = -5,
    E_ERROR_NOT_RESPONDING = -6,
    E_ERROR_INVALID_CHECKSUM = -7,
    E_ERROR_INVALID_DATA = -8,
    E_ERROR_TIMEOUT = -9,
    E_ERROR_HW_FAILURE = -10,
    E_ERROR_SW_FAILURE = -11,
    E_ERROR_NULL_REFERENCE = -12,
    E_ERROR_DIVIDE_BY_ZERO = -13,
    E_ERROR_INVALID_COMMAND = -14,
    E_ERROR_INDEX_OUT_OF_RANGE = -15,
    E_ERROR_MISSING_ARGUMENT = -16,
    E_ERROR_INVALID_DATA_VERSION = -17,
    E_ERROR_RESOURCE_UNAVAILABLE = -18,
    E_ERROR_INVALID_ARGUMENT = -19,
    E_ERROR_DOMAIN = -20,
    E_ERROR_ILLEGAL_SEQUENCE = -21,
    E_ERROR_PROTOCOL = -22,
    E_ERROR_HOST_UNAVAILABLE = -23,
    E_ERROR_UNKNOWN_IDENTIFIER = -24,
    E_ERROR_MALFORMED_PACKET = -25,
    E_ERROR_SERVER_DECLINED = -26,
    E_ERROR_UNSUPPORTED = -27,
    E_ERROR_INVALID_PACKET_SIZE = -28,
    E_ERROR_UNEXPECTED_PACKET_TYPE = -29,
    E_ERROR_INVALID_ENCODING = -30,
    E_ERROR_NOT_CONNECTED = -31,
    E_ERROR_INVALID_QOS = -32,
    E_ERROR_QOS_NOT_SUPPORTED = -33,
    E_ERROR_RETAIN_NOT_SUPPORTED = -34,
    E_ERROR_INVALID_TOPIC = -35,
    E_ERROR_INVALID_PACKET_ID = -36
};

/**
 * @brief Status codes
 *
 */
enum status_code {
    STATUS_SUCCESS = 0,
    STATUS_BUSY = 1,
    STATUS_READY = 2,
    STATUS_PENDING = 3,
    STATUS_STATE_CHANGED = 4,
    STATUS_BLOCKED = 5,
    STATUS_TASK_FINISHED = 6,
    STATUS_PASSED = 7
};

#define ERROR_INVALID ((E_ERROR_INVALID * ERROR_BASE) - __LINE__)
#define ERROR_OUT_OF_RESOURCE ((E_ERROR_OUT_OF_RESOURCE * ERROR_BASE) - __LINE__)
#define ERROR_OUT_OF_RANGE ((E_ERROR_OUT_OF_RANGE * ERROR_BASE) - __LINE__)
#define ERROR_OUT_OF_MEMORY ((E_ERROR_OUT_OF_MEMORY * ERROR_BASE) - __LINE__)
#define ERROR_INVALID_OPERATION ((E_ERROR_INVALID_OPERATION * ERROR_BASE) - __LINE__)
#define ERROR_NOT_RESPONDING ((E_ERROR_NOT_RESPONDING * ERROR_BASE) - __LINE__)
#define ERROR_INVALID_CHECKSUM ((E_ERROR_INVALID_CHECKSUM * ERROR_BASE) - __LINE__)
#define ERROR_INVALID_DATA ((E_ERROR_INVALID_DATA * ERROR_BASE) - __LINE__)
#define ERROR_TIMEOUT ((E_ERROR_TIMEOUT * ERROR_BASE) - __LINE__)
#define ERROR_HW_FAILURE ((E_ERROR_HW_FAILURE * ERROR_BASE) - __LINE__)
#define ERROR_SW_FAILURE ((E_ERROR_SW_FAILURE * ERROR_BASE) - __LINE__)
#define ERROR_NULL_REFERENCE ((E_ERROR_NULL_REFERENCE * ERROR_BASE) - __LINE__)
#define ERROR_DIVIDE_BY_ZERO ((E_ERROR_DIVIDE_BY_ZERO * ERROR_BASE) - __LINE__)
#define ERROR_INVALID_COMMAND ((E_ERROR_INVALID_COMMAND * ERROR_BASE) - __LINE__)
#define ERROR_INDEX_OUT_OF_RANGE ((E_ERROR_INDEX_OUT_OF_RANGE * ERROR_BASE) - __LINE__)
#define ERROR_MISSING_ARGUMENT ((E_ERROR_MISSING_ARGUMENT * ERROR_BASE) - __LINE__)
#define ERROR_INVALID_DATA_VERSION ((E_ERROR_INVALID_DATA_VERSION * ERROR_BASE) - __LINE__)
#define ERROR_RESOURCE_UNAVAILABLE ((E_ERROR_RESOURCE_UNAVAILABLE * ERROR_BASE) - __LINE__)
#define ERROR_INVALID_ARGUMENT ((E_ERROR_INVALID_ARGUMENT * ERROR_BASE) - __LINE__)
#define ERROR_DOMAIN ((E_ERROR_DOMAIN * ERROR_BASE) - __LINE__)
#define ERROR_ILLEGAL_SEQUENCE ((E_ERROR_ILLEGAL_SEQUENCE * ERROR_BASE) - __LINE__)
#define ERROR_PROTOCOL ((E_ERROR_PROTOCOL * ERROR_BASE) - __LINE__)
#define ERROR_HOST_UNAVAILABLE ((E_ERROR_HOST_UNAVAILABLE * ERROR_BASE) - __LINE__)
#define ERROR_UNKNOWN_IDENTIFIER ((E_ERROR_UNKNOWN_IDENTIFIER * ERROR_BASE) - __LINE__)
#define ERROR_MALFORMED_PACKET ((E_ERROR_MALFORMED_PACKET * ERROR_BASE) - __LINE__)
#define ERROR_SERVER_DECLINED ((E_ERROR_SERVER_DECLINED * ERROR_BASE) - __LINE__)
#define ERROR_UNSUPPORTED ((E_ERROR_UNSUPPORTED * ERROR_BASE) - __LINE__)
#define ERROR_INVALID_PACKET_SIZE ((E_ERROR_INVALID_PACKET_SIZE * ERROR_BASE) - __LINE__)
#define ERROR_UNEXPECTED_PACKET_TYPE ((E_ERROR_UNEXPECTED_PACKET_TYPE * ERROR_BASE) - __LINE__)
#define ERROR_INVALID_ENCODING ((E_ERROR_INVALID_ENCODING * ERROR_BASE) - __LINE__)
#define ERROR_NOT_CONNECTED ((E_ERROR_NOT_CONNECTED * ERROR_BASE) - __LINE__)
#define ERROR_INVALID_QOS ((E_ERROR_INVALID_QOS * ERROR_BASE) - __LINE__)
#define ERROR_QOS_NOT_SUPPORTED ((E_ERROR_QOS_NOT_SUPPORTED * ERROR_BASE) - __LINE__)
#define ERROR_RETAIN_NOT_SUPPORTED ((E_ERROR_RETAIN_NOT_SUPPORTED * ERROR_BASE) - __LINE__)
#define ERROR_INVALID_TOPIC ((E_ERROR_INVALID_TOPIC * ERROR_BASE) - __LINE__)
#define ERROR_INVALID_PACKET_ID ((E_ERROR_INVALID_PACKET_ID * ERROR_BASE) - __LINE__)

#endif /* STATUS_H_INCLUDED */